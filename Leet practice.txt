//Algorithm I: 1. Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.
let nums = [-1,0,3,5,9,12] 
let target = 3
function checkTarget(){
    if(nums.includes(target)){
        return nums.indexOf(target)
    } else {
        return -1
    }
}

console.log(checkTarget());

//Algorithm I: 2 Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
let nums = [12, 23, 8, 24]
let sqNum = nums.map((num) => num * num).sort((a, b) => a-b);
console.log(sqNum);

// Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements. Note that you must do this in-place without making a copy of the array.
let nums = [0,1,0,3,12];
nums.forEach(x => {
    if (x === 0) {
        nums.splice(nums.indexOf(0), 1)
        nums.splice(nums.length, 0, 0)
    } 
});
console.log(nums);
***********************
// Input: numbers = [2,7,11,15], target = 9 Output: [1,2]
var twoSum = function(numbers, target) {
    let indexArr = []
    for(var i = 0; i < numbers.length; i++){
        for(var j = 1; j <= numbers.length; j++){
          if((numbers[i] + numbers[j]) === target){
            return indexArr.concat(i+1, j+1)
        } 
    }
    }
};

console.log(twoSum(numbers, target))